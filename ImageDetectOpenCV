import cv2
import numpy as np
from OpenGL.GL import *
from OpenGL.GLU import *
import glfw
import pywavefront  # 用于加载 OBJ 模型

# 加载自定义模型
try:
    model1 = pywavefront.Wavefront(
        'C:/Users/DR.RLW/Desktop/study/UAL/Year 3/Image_Recognition/Model/Lowpoly_tree_sample.obj', collect_faces=True
    )  # 模型1路径
    model2 = pywavefront.Wavefront(
        'C:/Users/DR.RLW/Desktop/study/UAL/Year 3/Image_Recognition/Model/Star3.obj', collect_faces=True
    )  # 模型2路径
except Exception as e:
    print(f"模型加载失败: {e}")
    exit()

# 旋转角度
rotation_angle = 0
model_displayed = None  # 当前显示的模型


def init_gl(width, height):
    """初始化 OpenGL 环境"""
    glClearColor(0.0, 0.0, 0.0, 1.0)
    glEnable(GL_DEPTH_TEST)
    glViewport(0, 0, width, height)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(45, width / height, 0.1, 100.0)
    glMatrixMode(GL_MODELVIEW)


def draw_model(model, rotation_angle):
    """绘制导入的 3D 模型，并设置自定义颜色"""
    glPushMatrix()
    glRotatef(rotation_angle, 0, 1, 0)  # 绕 Y 轴旋转
    glRotatef(rotation_angle * 0.5, 1, 0, 0)  # 稍微绕 X 轴旋转
    glScalef(0.05, 0.05, 0.05)  # 调整模型缩放比例

    # 设置模型颜色为蓝色 (R=0, G=0, B=1)
    #glColor3f(0.0, 0.0, 1.0)

    glBegin(GL_TRIANGLES)
    for mesh in model.mesh_list:  # 遍历模型中的每个网格
        for face in mesh.faces:  # 遍历网格中的每个面
            for vertex_i in face:  # 遍历面的每个顶点索引
                vertex = model.vertices[vertex_i]  # 获取顶点坐标
                glVertex3f(*vertex)  # 设置顶点
    glEnd()

    glPopMatrix()


def check_pattern(detected_pattern):
    """检查检测到的图案是否符合目标"""
    target_pattern1 = [1, 0, 0, 1, 0, 1, 1]
    target_pattern2 = [0, 1, 1, 0, 1, 1, 0]
    pattern_left = [0, 1, 0, 0, 1, 1, 0]
    pattern_right = [0, 0, 1, 0, 1, 1, 0]

    if detected_pattern == target_pattern1:
        return "pattern1"
    elif detected_pattern == target_pattern2:
        return "pattern2"
    elif detected_pattern == pattern_left:
        return "left"
    elif detected_pattern == pattern_right:
        return "right"
    return None


def detect_pattern(frame, gray):
    """检测图案并返回中心点和颜色"""
    blurred = cv2.GaussianBlur(gray, (9, 9), 2)
    circles = cv2.HoughCircles(
        blurred,
        cv2.HOUGH_GRADIENT,
        dp=1,
        minDist=30,
        param1=20,
        param2=25,
        minRadius=30,
        maxRadius=60
    )
    detected_centers = []
    if circles is not None:
        circles = np.round(circles[0, :]).astype("int")
        for (x, y, r) in circles:
            roi = gray[y - r:y + r, x - r:x + r]
            if roi.size > 0:
                avg_intensity = np.mean(roi)
                color = "black" if avg_intensity < 128 else "white"
                detected_centers.append((x, y, color))
                
                # 绘制检测到的圆形和中心点
                cv2.circle(frame, (x, y), r, (0, 255, 0), 4)
                cv2.circle(frame, (x, y), 2, (0, 0, 255), 3)
                
                # 在每个珠子旁边显示颜色信息
                cv2.putText(
                    frame,
                    color,  # 显示的颜色文本
                    (x + 10, y - 10),  # 显示位置，相对于圆心
                    cv2.FONT_HERSHEY_SIMPLEX,
                    0.7,
                    (255, 255, 255),  # 白色字体
                    2,  # 字体粗细
                    cv2.LINE_AA
                )
    return detected_centers


def get_detected_pattern(detected_centers):
    """生成检测到的图案矩阵"""
    pattern = []
    # 基于珠子的位置来判断其模式
    detected_centers.sort(key=lambda x: x[1])  # 按 y 坐标排序，确保从上到下处理
    for (x, y, color) in detected_centers:
        # 假设珠子在 y 坐标中排列的高度是根据某个模板
        if 50 <= y < 150:  # 第一行
            pattern.append(1 if color == "black" else 0)
        elif 150 <= y < 250:  # 第二行
            pattern.append(1 if color == "black" else 0)
        elif 250 <= y < 350:  # 第三行
            pattern.append(1 if color == "black" else 0)
        elif 350 <= y < 450:  # 第四行
            pattern.append(1 if color == "black" else 0)
        elif 450 <= y < 550:  # 第五行
            pattern.append(1 if color == "black" else 0)
    return pattern


# 初始化 GLFW 和摄像头
if not glfw.init():
    raise Exception("GLFW initialization failed")

width, height = 640, 480
window = glfw.create_window(width, height, "3D Rotating Model", None, None)
if not window:
    glfw.terminate()
    raise Exception("GLFW window creation failed")

glfw.make_context_current(window)
init_gl(width, height)

cap = cv2.VideoCapture(0)

global rotation_angle, model_displayed

while not glfw.window_should_close(window):
    ret, frame = cap.read()
    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    detected_centers = detect_pattern(frame, gray)
    detected_pattern = get_detected_pattern(detected_centers)

    # 转换 detected_pattern 为字符串
    pattern_str = "".join(str(cell) for cell in detected_pattern)

    # 在画面上添加文字
    cv2.putText(
        frame,                        # 图像
        f"Detected Pattern: {pattern_str}",  # 显示内容
        (10, 30),                     # 起始位置 (x, y)
        cv2.FONT_HERSHEY_SIMPLEX,     # 字体
        0.7,                          # 字体大小
        (255, 255, 255),              # 字体颜色 (白色)
        2,                            # 字体粗细
        cv2.LINE_AA                   # 抗锯齿
    )

    # 检查图案并控制模型显示和旋转
    pattern_type = check_pattern(detected_pattern)
    if pattern_type == "pattern1":
        if model_displayed != "model1":
            model_displayed = "model1"
            rotation_angle = 0  # 重置旋转角度
    elif pattern_type == "pattern2":
        if model_displayed != "model2":
            model_displayed = "model2"
            rotation_angle = 0  # 重置旋转角度
    elif pattern_type == "left":
        rotation_angle -= 1  # 左旋转
    elif pattern_type == "right":
        rotation_angle += 1  # 右旋转

    if model_displayed == "model1":
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glLoadIdentity()
        gluLookAt(0, 0, 5, 0, 0, 0, 0, 1, 0)
        draw_model(model1, rotation_angle)  # 绘制模型1
        glfw.swap_buffers(window)
    elif model_displayed == "model2":
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glLoadIdentity()
        gluLookAt(0, 0, 5, 0, 0, 0, 0, 1, 0)
        draw_model(model2, rotation_angle)  # 绘制模型2
        glfw.swap_buffers(window)

    # 显示处理后的帧
    cv2.imshow('Flipped Frame', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
glfw.terminate()
